ggplot() + geom_histogram(aes(x=my.data), bins = 1)
ggplot() + geom_histogram(aes(x=my.data), bins = 100)
ggplot() + geom_histogram(aes(x=my.data), bins = 50)
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue")
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.3)
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.8)
ggplot() + geom_density(aes = my.data)
ggplot() + geom_density(aes(x = my.data))
ggplot() + geom_density(aes(x = my.data), fill = "green", color ="blue")
p<- ggplot() + geom_density(aes(x = my.data), fill = "green", color ="blue") + ggtitle("My plot")
p
p<- ggplot() + geom_density(aes(x = my.data), fill = "yellow", color ="blue") + ggtitle("My plot")
p
p<- ggplot() + geom_density(aes(x = my.data), fill = "yellow", color ="blue", alpha = 0.7) + ggtitle("My plot")
p
p + coord_cartesian(xlim = c(0,1))
p
p + coord_cartesian(xlim = c(0,2))
p + coord_cartesian(xlim = c(2,3))
p + coord_cartesian(xlim = c(2,3)) + xlab("data") + ylab("density")
p  + xlab("data") + ylab("density")
p  + xlab("data") + ylab("density") + ggtitle("my plot")
a<- ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.8)
a
a + geom_histogram(color = "yellow")
x <- seq(from = 1, to = 10, by = 0.1)
y <- x*3 + x^2 + sin(x) + rnorm(length(x), sd =3)
x <- seq(from = -3, to = 3, by = 0.1)
y <- x*3 + x^2 + sin(x) + rnorm(length(x), sd =3)
ggplot() + geom_point(aes(x =x, y=y))
b <- ggplot() + geom_point(aes(x =x, y=y))
b + geom_smooth(aes(x=x, y=y))
b + geom_smooth(aes(x=x, y=y), method = lm)
b + geom_smooth(aes(x=x, y=y), method = lm) + geom_smooth(aes(x=x, y=y), method = loess)
b + geom_smooth(aes(x=x, y=y), method = lm) + geom_smooth(aes(x=x, y=y), method = loess, color = "red")
sleep <- rnorm(100, ,mean = 6, sd =1)
sleep <- rnorm(100, ,mean = 6, sd =1)
sleep <- rnorm(100, mean = 6, sd =1)
grade <- sleep + sleep^2 + rnrom(length(sleep), sd = 3)
grade <- sleep + sleep^2 + rnorm(length(sleep), sd = 3)
dataframe <- df(sleep, grade)
df <- dataframe(sleep, grade)
df <- data.frame(sleep, grade)
ggplot(data =df, aes(x = sleep, y =drade)) + geom_point()
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point()
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth()
rep.int(c(1,0), c(50,50))
class <- rep.int(c(1,0), c(50,50))
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x
df2 <- data.frame(input =x, output = y, condition = class)
df2
ggplot(df2, aes(x = input, y = output))
ggplot(df2, aes(x = input, y = output)) + geom_point()
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
grade <- sleep + sleep^2 + rnorm(length(sleep), sd = 10)
df <- data.frame(sleep, grade)
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth()
class <- rep.int(c(1,0), c(50,50))
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x
df2 <- data.frame(input =x, output = y, condition = class)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x +rnorm(100, sd = 10)
df2 <- data.frame(input =x, output = y, condition = class)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth()
facet_grid(.~condition) + ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth()
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition)
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition) + theme_minimal
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition) + theme_minimal()
### 0. libraries----
library(data.table)
library(plyr)
library(circlize)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cluster)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(wordcloud)
Dem = fread(file.choose() ,header=TRUE)
Dia = fread(file.choose() ,header=TRUE)
Dem$race[Dem$race == 'Hispanic-HISPANIC'] = 'Hispanic'
Dem$race[Dem$race == 'White-WHITE'] = 'White'
Dem$race[Dem$race == 'American Indian-AMERICAN INDIAN'] = 'American Indian'
Dem$race[Dem$race == 'Asian-ASIAN'] = 'Asian'
Dem$race[Dem$race == 'BLACK OR AFRICAN AMERICAN'] = 'African American'
Dem$race[Dem$race == 'Black-BLACK'] = 'Black'
#Data conversion
Dem$date_of_birth = as.Date(Dem$date_of_birth)
Dem$date_of_death = as.Date(Dem$date_of_death)
Dia$dia_date = as.Date(Dia$dia_date)
### 3. Basic stats and plots----
options(digits=3)
race_gender <- dcast( Dem , race ~ gender , length )
race_gender$total <- race_gender$female + race_gender$male
race_gender <- race_gender[order(-race_gender$total),]
race_gender$age_average <- c(69.6,70.8,60.6,72.2,72.4,65.2)
race_gender$age_sd <- c(22.3,20.1,21.0,20.5,21.4,22.5)
row.names(race_gender) <- NULL
new_row <- c("All races",200,200,400,69.4,21.8)
race_gender <- rbind(new_row, race_gender)
#race and gender table
grid.table(race_gender, rows=NULL)
"tableau for bubble chart"
positions <- c("White", "Black", "Asian", "African American", "Hispanic","American Indian")
ggplot(Dem, aes(race, fill=gender)) + scale_x_discrete(limits = positions) +
geom_bar() +
ggtitle("Breakdown of patients based on Race and Gender")
geom_text(aes(label = count, y = pos), size = 3) + geom_text()
ggplot(Dem, aes(race, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF") +
ggtitle("Patients average Age based on Race")
ggplot(Dem, aes(race, age, fill = gender)) + geom_boxplot() +
ggtitle("Patients age based on race and gender")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
aggregate(age~gender, Dem, function(x) c(mean = mean(x), sd = sd(x)))
ggplot(Dem, aes(gender, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF")+
ggtitle("Patients average age based on Gender")
jpg("1.jpg")
bmp("1.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
bmp("2.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
white <- Dem[ which(Dem$race =='White')]
#visualizing age of patients only for whites
"both female and male patients have an increase after "
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 1, color ="grey")
dev.off()
N = 3
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
library(data.table)
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
top100 <- from[1:100,]
selected <- people[people$from %in% top100$rn,]
library(plyr)
cdata <- ddply(selected, c("from", "to"), summarise)
cdata <- ddply(selected, c("from", "to"), summarise,   N = length(from))
View(cdata)
a <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
mat_sel <- cbind(selected$from, a,b)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel <- subset(mat_sel, V1 = NULL | from = NULL)
mat_sel <- subset(mat_sel, V1 == NULL | from == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NA )
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == "NA" )
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != 'NA']
mat_sel <- mat_sel[ V1 != 'NA' | from != '']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != '' | nchar(V1) < 15]
mat_sel <- mat_sel[ from != '']
mat_sel <- mat_sel[ nchar(V1) < 15 ]
View(mat_sel)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
a[, list(V1, V2, V3, V4, V5)]
a <- a[, list(V1, V2, V3, V4, V5)]
View(a)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel)
View(from)
View(selected)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
View(from)
top100 <- from[1:100,]
top100 <- top100[from != '']
View(top100)
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- a[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
recipients_sep <- recipients_sep[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
View(recipients_sep)
mat_sel <- cbind(selected$from, recipients_sep)
View(mat_sel)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel2 <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA']
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 25]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
View(mat_sel2)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
rm(mat_sel2)
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37]
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & v1 != '']
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata1)
View(cdata2)
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
View(cdata2)
View(cdata1)
recipients_sep <- recipients_sep[, list(V1, V2)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
rm(cdata)
View(cdata1)
View(cdata2)
View(cdata1)
cdata3 <- ddply(mat_sel, c("from", "V1","V2"), summarise,   N = length(from))
View(cdata3)
rm(cdata3)
rbind.fill(list(cdata1, cdata2)))
rbind.fill(list(cdata1, cdata2))
pp <- cbind(names=c(rownames(cdata1), rownames(cdata2)),
rbind.fill(list(cdata1, cdata2))
)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
setwd("~/GitHub")
setwd("~/GitHub/SNA extra")
library(NLP)
library(tm)
greg = readLines("text.txt")
### 2. Corpus ----
doc.vec <- VectorSource(greg)
doc.corpus <- Corpus(doc.vec)
#cleaning up the text
doc.corpus <- tm_map(doc.corpus, content_transformer(tolower))
doc.corpus <- tm_map(doc.corpus, removePunctuation)
doc.corpus <- tm_map(doc.corpus, removeNumbers)
doc.corpus <- tm_map(doc.corpus, removeWords, stopwords("english"))
#stemming & whitespace
library(SnowballC)
doc.corpus <- tm_map(doc.corpus, stemDocument)
doc.corpus <- tm_map(doc.corpus, stripWhitespace)
# TDM
TDM <- TermDocumentMatrix(doc.corpus)
termDocMatrix <- as.matrix(TDM)
termDocMatrix[termDocMatrix>=1] <- 1
# transform into a term-term adjacency matrix
termMatrix <- termDocMatrix %*% t(termDocMatrix)
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
# remove loops
g <- simplify(g)
# set labels and degrees of vertices
V(g)$label <- V(g)$name
V(g)$degree <- degree(g)
isolates <- which(degree(graph, mode = mode) == 0) - 1
}
g2 <- delete.isolates(g, mode = 'in')
delete.vertices(graph, isolates)
delete.isolates <- function(graph, mode = 'all') {
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
library(igraph)
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
g <- simplify(g)
V(g)$label <- V(g)$name
V(g)$degree <- degree(g)
g2 <- delete.isolates(g, mode = 'in')
a <- as.data.frame(degree(g2))
colnames(a) <- c("deg")
View(a)
a <- a[order(deg),]
colnames(a)
a <- a[order("deg"),]
a <- as.data.frame(degree(g2))
colnames(a) <- c("deg")
a2 <- subset(a, deg > 100)
View(`a2`)
View(termMatrix)
View(termMatrix)
newdata <- row.names(termMatrix)  %in% a2$deg
newdata <- as.matrix(row.names(termMatrix)  %in% a2$deg )
View(newdata)
View(termMatrix)
View(termDocMatrix)
newdata <- row.names(termDocMatrix)  %in% a2$deg
newdata <- termDocMatrix[row.names(termDocMatrix)  %in% a2$deg,]
View(newdata)
newdata <- as.matrix(TDM)
View(newdata)
View(termMatrix)
View(termMatrix)
newdata <- termMatrix[termMatrix == a2,]
View(newdata)
newdata <- termMatrix[termMatrix == a2, termMatrix == a2]
newdata <- as.data.frame(termMatrix)
View(newdata)
View(newdata)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
View(newdata)
View(`a2`)
a2 <- cbind(Row.Names = rownames(a2), a2)
View(`a2`)
newdata2 <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
View(newdata2)
newdata3 <- newdata2[ , which(names(newdata2) %in% a2$Row.Names)]
View(newdata3)
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(g2))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
a2 <- cbind(Row.Names = rownames(a2), a2)
newdata <- as.data.frame(matrixY)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
newdata <- newdata2[ , which(names(newdata) %in% a2$Row.Names)]
cleaned_matrix <- as.matrix(newdata)
}
abc <- filter.on.degree(termMatrix, 100)
View(abc)
cleaned.termMatrix <- filter.on.degree(termMatrix, 100)
g <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
g <- simplify(g)
V(g)$label <- V(g)$name
V(g)$degree <- degree(g)
delete.isolates <- function(graph, mode = 'all') {
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
g2 <- delete.isolates(g, mode = 'in')
set.seed(3952)
layout1 <- layout.fruchterman.reingold(g)
plot(g, layout=layout1)
plot(g2, layout=layout.kamada.kawai, vertex.label = ifelse(degree(g) > 200, V(g)$label, NA))
plot(g2, layout=layout.kamada.kawai, vertex.label = ifelse(degree(g) > 150, V(g)$label, NA))
plot(g, layout=layout1,
edge.arrow.size=.3)
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 150, V(g)$label, NA)
)
vertex.label = ifelse(degree(g) > 125, V(g)$label, NA)
)
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 125, V(g)$label, NA)
)
V(g)$size=degree(g)/100
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 125, V(g)$label, NA)
)
V(g)$size=degree(g)/10
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 125, V(g)$label, NA)
)
V(g)$size=degree(g)/5
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 100, V(g)$label, NA)
)
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.label = ifelse(degree(g) > 50, V(g)$label, NA)
)
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.shape="none"
vertex.label = ifelse(degree(g) > 50, V(g)$label, NA)
)
plot(g, layout=layout1,
edge.arrow.size=.3,
vertex.shape="none",
vertex.label = ifelse(degree(g) > 50, V(g)$label, NA)
)
l <- layout.fruchterman.reingold(g, repulserad=vcount(g)^3,
area=vcount(g)^2.4)
plot(g, layout=l,
edge.arrow.size=.3,
vertex.shape="none",
vertex.label = ifelse(degree(g) > 50, V(g)$label, NA)
)
plot(g, layout=l,
edge.arrow.size=.3,
vertex.shape="none",
vertex.label = ifelse(degree(g) > 1, V(g)$label, NA)
)
plot(g, layout=layout.lgl,
edge.arrow.size=.3,
vertex.shape="none",
vertex.label = ifelse(degree(g) > 1, V(g)$label, NA)
)
pdf("sna_words.pdf")
plot(g, layout=layout.lgl,
edge.arrow.size=.3,
vertex.shape="none",
vertex.label = ifelse(degree(g) > 1, V(g)$label, NA)
)
dev.off()
