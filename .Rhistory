)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
library(igraph)
n <- 71
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- cc/APL
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- (cc/0.51)/(APL/1.54)
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
p <- 0.75
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
n <- 360000000
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
n <- 71
p <- 1
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
library(igprah)
library(igpraph)
library(igraph)
source.with.encoding('~/Desktop/articles/r.R', encoding='UTF-8')
setwd("~/Desktop/articles")
data = read.csv(file.choose(), sep = ";", header = F)
edgelist = read.csv(file.choose(), sep = ";", header = F)
matrix <-  matrix(0, 212,212)
rownames(matrix) <- edgelist$V1
colnames(matrix) <- edgelist$V1
View(matrix)
View(data)
View(data)
data.mat <- as.matrix(data)
View(data.mat)
for(i in 1:nrow(data)){matrix[rownames(matrix)==data[i,2],colnames(matrix)==d[i,1]] <- 1
for(i in 1:nrow(data)){matrix[rownames(matrix)==data[i,2],colnames(matrix)==d[i,1]]} <- 1
for(i in 1:nrow(data)){matrix[rownames(matrix)==data[i,2],colnames(matrix)==data[i,1]]} <- 1
for(i in 1:nrow(data)){matrix[rownames(matrix)==data[i,2],colnames(matrix)==data[i,1]] <- 1}
View(matrix)
nrow(matrix)
data[1,2]
data[1,1]
length(data[1,1])
nchar(data[1,1])
nchar(as.character(data[1,1]))
}
for (i in 1:nrow(data)){
for (j in 1:nrow(matrix)){
if (matrix[j,1] == data[i,1]){
print("yes")
}
}
}
for (i in 1:nrow(data)){
if(matirx[rownames(matrix)== data[i,1]]){
print(i)
}
}
for (i in 1:nrow(data)){
if(matrix[rownames(matrix)== data[i,1]]){
print(i)
}
}
type(matrix)
str(matrix)
str(data)
data < as.character(data)
str(data)
data[] <- lapply(data, as.character)
str(data)
for (i in 1:nrow(data)){
if(matrix[rownames(matrix)== data[i,1]]){
print(i)
}
}
for (i in 1:nrow(data)){
if(matrix[rownames(matrix) = data[i,1]]){
print(i)
}
}
for (i in 1:nrow(data)){
if(matrix[rownames(matrix) = data[i,1]]){
print(i)
}
}
for (i in 1:nrow(data)){
if(matrix[rownames(matrix) = data[i,1]]){
for (i in 1:nrow(data)){
if(matrix[rownames(matrix) == data[i,1]]){
print(i)
}
}
matrix[rownames(matrix)]
rownames(matrix)
for (i in 1:nrow(data)){
if(rownames(matrix) == data[i,1]){
print(i)
}
}
data[1,1]
data[1,1] == rownmaes(matrix)
data[1,1] == rownames(matrix)
for (i in 1:nrow(data)){
if(rownames(matrix) == data[i,1]){
}
}
for (i in 1:nrow(data)){
rownames(matrix) == data[i,1]
}
}
for (i in 1:nrow(data)){
rownames(matrix) == data[i,1]
}
for (i in 1:nrow(data)){
rownames(matrix) == data[i,1]
print(data[i,1])
}
rownames(marix)
rownames(matrix)
for (i in 1:nrow(data)){
m <- (rownames(matrix) == data[i,1])
}
}
setwd("~/GitHub/SNA extra")
library(NLP)
library(tm)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
### 1. import the file----
greg = readLines("text.txt")
doc.vec <- VectorSource(greg)
doc.corpus <- Corpus(doc.vec)
#cleaning up the text
doc.corpus <- tm_map(doc.corpus, content_transformer(tolower))
doc.corpus <- tm_map(doc.corpus, removePunctuation)
doc.corpus <- tm_map(doc.corpus, removeNumbers)
doc.corpus <- tm_map(doc.corpus, removeWords, stopwords("english"))
library(SnowballC)
doc.corpus <- tm_map(doc.corpus, stemDocument)
doc.corpus <- tm_map(doc.corpus, stripWhitespace)
TDM <- TermDocumentMatrix(doc.corpus)
#remove sparse terms
#TDM.common = removeSparseTerms(TDM, 0.05)
termDocMatrix <- as.matrix(TDM)
termDocMatrix[termDocMatrix>=1] <- 1
View(termDocMatrix)
termMatrix <- termDocMatrix %*% t(termDocMatrix)
library(igraph)
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(g))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
a2 <- cbind(Row.Names = rownames(a2), a2)
newdata <- as.data.frame(matrixY)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
newdata <- newdata[ , which(names(newdata) %in% a2$Row.Names)]
cleaned_matrix <- as.matrix(newdata)
}
cleaned.termMatrix <- filter.on.degree(termMatrix, 120)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
cleaned.termMatrix <- filter.on.degree(termMatrix, 150)
cleaned.termMatrix <- filter.on.degree(termMatrix, 200)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
g2 <- simplify(g2)
V(g2)$label <- V(g2)$name
V(g2)$degree <- degree(g2)
delete.isolates <- function(graph, mode = 'all') {
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
g2 <- delete.isolates(g2, mode = 'in')
set.seed(3952)
V(g2)$size=degree(g2)/5
E(g2)$color <- "white"
pdf("sna_words1.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/200,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
pdf("sna_words1.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/200,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
pdf("sna_words2.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
pdf("sna_words3.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/50,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
pdf("sna_words3.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/80,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
pdf("sna_words.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
E(g2)$color <- "grey"
pdf("sna_words.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
E(g2)$color <- "white"
topo(g2)
fgn = edge.betweenness.community (g2, directed = F, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
pdf("fgn.pdf")
plot(fgn, g2,
vertex.frame.color = NULL)
dev.off()
fwt <- walktrap.community(g2, steps=200,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
pdf("fwt.pdf")
plot(fwt, g2,
)  ## plot R-W partitioning
dev.off()
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits <- row.names(cleaned.termMatrix)
fb <- cbind(traits, girvan, rw)
View(fb)
View(girvan)
View(rw)
View(fb)
cleaned.termMatrix <- filter.on.degree(termMatrix, 150)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
g2 <- simplify(g2)
V(g2)$label <- V(g2)$name
V(g2)$degree <- degree(g2)
delete.isolates <- function(graph, mode = 'all') {
isolates <- which(degree(graph, mode = mode) == 0) - 1
delete.vertices(graph, isolates)
}
g2 <- delete.isolates(g2, mode = 'in')
topo(g2)
fgn = edge.betweenness.community (g2, directed = F, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=200,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
View(girvan)
View(rw)
fwt <- walktrap.community(g2, steps=50,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
View(girvan)
View(rw)
cleaned.termMatrix <- filter.on.degree(termMatrix, 200)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
g2 <- simplify(g2)
V(g2)$label <- V(g2)$name
V(g2)$degree <- degree(g2)
g2 <- delete.isolates(g2, mode = 'in')
layout1 <- layout.fruchterman.reingold(g2)*5
V(g2)$size=degree(g2)/5
E(g2)$color <- "white"
fgn = edge.betweenness.community (g2, directed = F, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=50,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits <- row.names(cleaned.termMatrix)
fb <- cbind(traits, girvan, rw)
View(fb)
View(rw)
fwt <- walktrap.community(g2, steps=10,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
traits <- row.names(cleaned.termMatrix)
View(fb)
View(rw)
View(fb)
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits <- row.names(cleaned.termMatrix)
fb <- cbind(traits, girvan, rw)
View(fb)
fwt <- walktrap.community(g2, steps=50,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
fb <- cbind(traits, girvan, rw)
View(fb)
fwt <- walktrap.community(g2, steps=25,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
View(rw)
fb <- cbind(traits, girvan, rw)
View(fb)
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
pdf("sna_words.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
pdf("fgn.pdf")
plot(fgn, g2,
vertex.frame.color = NULL)
dev.off()
pdf("fwt.pdf")
plot(fwt, g2,
)  ## plot R-W partitioning
dev.off()
View(rw)
vertex_attr(g2, index=rw$ID) <- rw
View(cleaned.termMatrix)
vertex_attr(g2) <- rw
list.vertex.attributes(g2)
V(g2)$color <- fwt$membership + 1
plot(g2)
plot(g2)
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2),
edge.arrow.size=0.3,
)
pdf("sna_words4.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
#vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
#vertex.label.cex = degree(g2)/100,
#vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
pdf("sna_words4.pdf")
plot.igraph(g2,
layout=layout.fruchterman.reingold(g2)*5,
edge.arrow.size=0.3,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
#vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
)
dev.off()
View(rw)
V(g2)$color <- fwt$membership
plot(g2)
View(rw)
vertex_attr(g2) <- rw$fwt.membership
vertex_attr(g2) <- fwt$membership
vertex_attr(g2) <- fwt
V(g2)$color <- fwt$membership
View(rw)
V(g2)[V(g2)$type == 1]$shape <- "square"
V(g2)[V(g2)$type == 0]$shape <- "square"
g2 <- simplify(g2)
V(g2)$label <- V(g2)$name
greg = readLines("text.txt")
doc.vec <- VectorSource(greg)
doc.corpus <- Corpus(doc.vec)
doc.corpus <- tm_map(doc.corpus, content_transformer(tolower))
doc.corpus <- tm_map(doc.corpus, removePunctuation)
doc.corpus <- tm_map(doc.corpus, removeNumbers)
doc.corpus <- tm_map(doc.corpus, removeWords, stopwords("english"))
doc.corpus <- tm_map(doc.corpus, stemDocument)
doc.corpus <- tm_map(doc.corpus, stripWhitespace)
TDM <- TermDocumentMatrix(doc.corpus)
termDocMatrix <- as.matrix(TDM)
termDocMatrix[termDocMatrix>=1] <- 1
termMatrix <- termDocMatrix %*% t(termDocMatrix)
g <- graph.adjacency(termMatrix, weighted=T, mode = "undirected")
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(g))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
newdata <- as.data.frame(matrixY)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
cleaned_matrix <- as.matrix(newdata)
cleaned.termMatrix <- filter.on.degree(termMatrix, 200)
V(g2)$degree <- degree(g2)
isolates <- which(degree(graph, mode = mode) == 0) - 1
}
g2 <- simplify(g2)
set.seed(3952)
V(g2)$size=degree(g2)/5
plot.igraph(g2,
edge.arrow.size=0.3,
vertex.label.cex = degree(g2)/100,
)
newdata <- newdata[ , which(names(newdata) %in% a2$Row.Names)]
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
delete.isolates <- function(graph, mode = 'all') {
g2 <- delete.isolates(g2, mode = 'in')
vertex.shape="none",
E(g2)$color <- "white"
a2 <- cbind(Row.Names = rownames(a2), a2)
}
layout=layout.fruchterman.reingold(g2)*5,
delete.vertices(graph, isolates)
V(g2)$label <- V(g2)$name
#vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
cleaned.termMatrix <- filter.on.degree(termMatrix, 200)
